{
  "hash": "678b0b767bc98233cc45b2270f5d32a2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"From rmarkdown to quarto to produce documents\"\nsubtitle: \"Enhancing scientific publishing through Quarto\"\ninstitute: \"Posit\"\nauthor: \"Christophe Dervieux\"\ndate: \"2024-07-08\"\nformat: clean-revealjs\nrevealjs-plugins:\n  - codefocus\n---\n\n\n\n\n\n## Get started with Quarto!\n\n::: callout\n# Let's do it together! Follow along...\n\nCreate a Quarto project in RStudio and produce HTML.\n:::\n\n::: panel-tabset\n## RStudio IDE\n\nFile \\> New Project...\n\n![](images/rstudio-new-project-quarto.png){.absolute fig-alt=\"Quarto project creation menu from RStudio IDE\" top=\"320\" left=\"400\" width=\"450\"}\n\n## Quarto CLI\n\n``` powershell\n$ quarto create project\n ? Type Â» default\n ? Directory Â» quarto-101\nCreating project at C:\\Users\\chris\\AppData\\Local\\Temp\\quarto-101:\n  - Created _quarto.yml\n  - Created quarto-101.qmd\n```\n:::\n\n## Let's explore...\n\n``` powershell\nquarto-101\nLÂ¦Â¦ quarto-101.qmd\nLÂ¦Â¦ _quarto.yml\n```\n\n</br>\n\n::::: columns\n::: column\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  title: \"quarto-101\"\n```\n:::\n\n::: column\n``` {.markdown filename=\"quarto-101.qmd\"}\n---\ntitle: \"quarto-101\"\n---\n\n## Quarto\n\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.\n```\n:::\n:::::\n\n## Producing HTML\n\n![New button for transforming your document in RStudio IDE](images/rstudio-render-quarto.png){fig-alt=\"Screenshot for RStudio IDE source menu bar in a .qmd document to show new render button.\"}\n\n``` {.bash filename=\"terminal\"}\nquarto render quarto-101.qmd # defaults to html\nquarto render quarto-101.qmd --to html\n```\n\n## Producing HTML\n\n![](images/rstudio-render-quarto-html.png){fig-alt=\"Screenshot of the RStudio IDE viewer window after generating HTML.\"}\n\n## What about my existing documents?\n\n::: fragment\nConvert from `.Rmd` to `.qmd` ?\n:::\n\n::: fragment\nNo need, Quarto is compatible!\n\n``` {.bash filename=\"terminal\"}\nquarto render my-favorite.Rmd --to html\n```\n:::\n\n## Over to you!\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_996a5e56\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n::: callout\n# Add to the project\n\n1.  Create a sub-folder in the project e.g. `reports`.\n2.  Add the `.Rmd` exercise file named [`penguins.Rmd`](https://raw.githubusercontent.com/cderv/tuto-quarto-user-2024/main/exercises/penguins.Rmd) as is.\n3.  Generate HTML with `quarto preview reports/penguins.Rmd` in Terminal.\n4.  Generate HTML using the Render button in the IDE.\n:::\n\n::: callout-tip\n## Display the Render button instead of Knit for an Rmd in a Quarto project\n\nRemove `output: html_document` from the YAML header and save the file: The **Render** button should now appear.\n:::\n\n# From `.Rmd` to `.qmd`.\n\nLet's see what changes!\n\n## YAML header for Metadata\n\nYAML is still used to provide document-level metadata.\n\n``` yaml\n---\ntitle: \"A penguin story\"\nauthor: \"C. Dervieux\"\ndate: \"2024-07-08\"\nformat: \n  html: \n    toc: true\n---\n```\n\n::: {.fragment data-code-focus=\"2-4\"}\n-   Some general metadata informations for the document\n:::\n\n::: {.fragment data-code-focus=\"5-7\"}\n-   Some format specific configuration for the targetted output format\n:::\n\n## YAML for cells options {auto-animate=\"true\"}\n\n\n\n\n````{.default}\n```{r species, warning=FALSE, fig.width=5, fig.cap=\"About penguins\"}\nggplot(\n  penguins,\n  aes(\n    x = bill_length_mm, y = bill_depth_mm,\n    color = species, shape = species\n  )\n) +\n  geom_point() +\n  labs(x = \"Bill length (mm)\", y = \"Bill depth (mm)\")\n```\n````\n\n\n\n## YAML for cells options {auto-animate=\"true\"}\n\n\n\n\n````{.default}\n```{r}\n#| label: bill-dims-species\n#| fig-width: 5\n#| fig-cap: About penguins\nggplot(\n  penguins,\n  aes(\n    x = bill_length_mm, y = bill_depth_mm,\n    color = species, shape = species\n  )\n) +\n  geom_point() +\n  labs(x = \"Bill length (mm)\", y = \"Bill depth (mm)\")\n```\n````\n\n\n\n## YAML for cells options {auto-animate=\"true\"}\n\n``` yaml\n#| label: bill-dims-species\n#| fig-width: 5\n#| fig-cap: About penguins\n```\n\nQuarto introduces the \"hash pipe\" in `#|` - this is the preferred syntax, although Quarto is backwards compatible with the old R Markdown syntax.\n\n1.  Consistency between *computation engines* (Jupyter/knitr/julia)\n2.  Consistency between YAML header / YAML in cells / Divs options (`:::`)\n3.  One option per line, offering autocompletion and validation\n\n::: callout-note\nTechnically, this is constructed as `<language-comment-char>|` e.g. `#` for R, Python and Julia but `//|` for OJS cells as `//` is the comment char for Javascript.\n:::\n\n## YAML for cells options {auto-animate=\"true\"}\n\n``` yaml\n#| fig-width: 5\n#| fig-cap: About penguins\n```\n\nNote that YAML for Quarto will follow a \"word-word\" syntax, with a `-` dash and not a `.`.\n\n::: {.callout-note appearance=\"minimal\"}\nThe difference in syntax is due to the fact that Quarto is more closely aligned with Pandoc's format names and options (hence the use of - as a word separator instead of `_` or `.`).\n:::\n\n## Over to you!\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_5a2e1ab3\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n::: callout\n# Transform into .qmd\n\n1.  Copy `penguins.Rmd` to `new-penguins.qmd`.\n2.  Use `knitr::convert_chunk_header()` on .qmd file\n    1.  see function help `?knitr::convert_chunk_header()` to know how to use it\n3.  Check code cells configurations\n4.  Check YAML header of `.qmd` file\n5.  Produce HTML document in `.qmd` format\n:::\n\n::: callout-tip\n## New Quarto features\n\nYou can test YAML autocompletion and validation in RStudio IDE [ðŸ”—](https://quarto.org/docs/tools/rstudio.html#yaml-intelligence)\n:::\n\n# Quarto unifies R Mardown\n\nLet's look at Quarto's built in features!\n\n## Callout Blocks {.smaller .with-logo}\n\n![](https://github.com/rstudio/bookdown/raw/main/man/figures/logo.png){.absolute fig-alt=\"Logo bookdown\" top=\"-40\" right=\"100\" height=\"120\"}\n\n| R Markdown | Quarto |\n|----------------------------|-------------------------------|\n| [Custom Blocks](https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html) of **rmarkdown** and **bookdown** to create and *style* yourself. | [Callout Blocks](https://quarto.org/docs/authoring/callouts.html) available in all formats and already *styled*. |\n\n: {tbl-colwidths=\"\\[50,50\\]\"}\n\n``` markdown\n::: {.callout-note}\n\n## About callouts\n\nNote that there are five types of callout:\n`note`, `warning`, `important`, `tip`, and `caution`.\n:::\n```\n\n::: callout-note\n## About callouts\n\nNote that there are five types of callout: `note`, `warning`, `important`, `tip`, and `caution`.\n:::\n\n## References(Figures, Tables, ...) {.smaller .with-logo}\n\n![](https://github.com/rstudio/bookdown/raw/main/man/figures/logo.png){.absolute fig-alt=\"Logo bookdown\" top=\"-40\" right=\"100\" height=\"120\"}\n\n| R Markdown | Quarto |\n|----------------------------------|--------------------------------------|\n| Available with **bookdown** in \"book\" formats (e.g. `gitbook()`) or single document variants such as `html_document2()` | [Cross References](https://quarto.org/docs/authoring/cross-references.html) available in all formats, for more content and configurable. |\n\n: {tbl-colwidths=\"\\[50,50\\]\"}\n\n::: callout-important\n## Change of syntax!\n\n-   Prefix required on the label in the form `fig-` and not `fig:`\n-   Same syntax as quote with `@label` and not `\\@ref(label)`\n:::\n\n``` {.markdown data-id=\"md-block\"}\nSee @fig-quarto-schematic for Alison Horst's illustration of how Quarto works.\n\n![An illustrated diagram of Quarto](images/quarto-schematics.png){#fig-quarto-schematic}\n```\n\n## References (Figures, Tables, ...) {.smaller .with-logo}\n\n![](https://github.com/rstudio/bookdown/raw/main/man/figures/logo.png){.absolute fig-alt=\"Logo bookdown\" top=\"-40\" right=\"100\" height=\"120\"}\n\n</br>\n</br>\n\n``` {.markdown data-id=\"md-block\"}\nSee @fig-quarto-schematic for Alison Horst's illustration of how Quarto works.\n\n![An illustrated diagram of Quarto](images/quarto-schematics.png){#fig-quarto-schematic}\n```\n</br>\n</br>\n\n::::: columns\n::: column\nSee @fig-quarto-schematic for Alison Horst's illustration of how Quarto works.\n:::\n\n::: column\n![A schematic representing rendering of Quarto documents from .qmd](images/quarto-schematics.png){#fig-quarto-schematic fig-alt=\"A schematic representing rendering of Quarto documents from .qmd, to knitr or jupyter, to plain text markdown, then converted by pandoc into any number of output types including html, PDF, or Word document.\"}\n:::\n:::::\n\n::: attribution\nArtwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine Ã‡etinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.\n:::\n\n## Article Layout {.smaller .with-logo}\n\n![](https://github.com/rstudio/distill/raw/main/man/figures/logo.png){.absolute fig-alt=\"Logo distill\" top=\"-40\" right=\"100\" height=\"120\"}\n\n| R Markdown | Quarto |\n|----------------------------------|--------------------------------------|\n| Available for HTML with **distill** ([Figure layout](https://rstudio.github.io/distill/figures.html)) ou **tufte** ([Margin content](https://rstudio.github.io/tufte/)) | [Article Layout](https://quarto.org/docs/authoring/article-layout.html) available for multiple formats and with more flexibility. |\n\n::: {layout-ncol=\"2\"}\n![](images/2-quarto-layout.png)\n\n![](images/3-quarto-layout.png)\n:::\n\n::: aside\nBeware of **distill** to Quarto conversion due to option conflicts!\n:::\n\n## Over to you!\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_b926c753\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n::: callout\n# Add these features!\n\nIn your `new-penguins.qmd` document:\n\n-   Try adding the following features:\n    -   [Article Layout](https://quarto.org/docs/authoring/article-layout.html),\n    -   [Cross References](https://quarto.org/docs/authoring/cross-references.html) (Figures, Tables, or any others...),\n    -   [Callout Blocks](https://quarto.org/docs/authoring/callouts.html).\n-   See how to add layouts for figures created from code ([Figure computation](https://quarto.org/docs/authoring/figures.html#computations)).\n-   And much more in the [Authoring](https://quarto.org/docs/guide/) section of the guide. Curious about Quarto's unique features?\n    -   [Code Annotation](https://quarto.org/docs/authoring/code-annotation.html)\n    -   Built-in [Diagram](https://quarto.org/docs/authoring/diagrams.html) renderers\n:::\n\n::: {.columns .make-smaller}\n::: {.column width=70%}\n::: {.callout-note icon=false}\n\nYou can start from your previous document, or download a fresh version from [Tutorial's website](http://localhost:5428/2-rmd-quarto/#exercises)\n\n:::\n:::\n::: {.colum width=30%}\n:::\n:::\n\n# Quarto formats\n\nAs with R Markdown, different document formats can be produced.\n\n## Multiple formats...\n\n::::: {.columns}\n::: {.column width=\"33%\"}\n-   `format: html`\n-   `format: pdf`\n:::\n\n::: {.column width=\"33%\"}\n-   `format: typst`\n-   `format: docx`\n:::\n\n::: {.column width=\"34%\"}\n-   `format: revealjs`\n-   `format: pptx`\n:::\n\n:::::\n\n</br>\n\n``` yaml\nformat: \n  html:\n    code-fold: true\n  pdf:\n    lof: true #<1>\ntoc: true #<2>\n```\n\n1.  `lof` = *List Of Figures*\n2.  Example of an option common to HTML and PDF formats\n\n<br>\n\n## ...based on Pandoc\n\n##  {background-video=\"images/quarto-all-formats.mp4\" background-video-loop=\"true\" background-video-muted=\"true\"}\n\n## Specific options - Ex: HTML Themes\n\nQuarto's HTML is styled with Bootstrap 5 and default values chosen for Quarto.\n\n``` yaml\n---\nformat:\n  html:\n    theme: litera\n---\n```\n\n## Specific Options - Ex: HTML Themes {#html-theme auto-animate=\"true\"}\n\nQuarto's HTML is styled with Bootstrap 5 and default values chosen for Quarto.\n\n``` yaml\n---\nformat:\n  html:\n    theme: \n      - litera\n      - custom.scss\n---\n```\n\nYou can also use a theme and customize components with SCSS/SASS.\n\n## Specific options - Ex: *Code tools*\n\n``` yaml\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n```\n\n![](images/code-tools.png){fig-alt=\"Screenshot of the menu added to HTML quarto when code-tools is activated\"}\n\n## Discover the options! {.wide-list}\n\n-   Quarto guide: <https://quarto.org/docs/guide/>\n\n-   Options reference pages for each format: <https://quarto.org/docs/reference/>\n\n-   YAML auto-completion: <https://quarto.org/docs/tools/rstudio.html#yaml-intelligence>\n\n## My turn!\n\n#### Demo time ! ðŸ•™\n\n::: callout\n# Produce a PDF\n\n-   Little or no change in the `.qmd` used to produce HTML.\n:::\n\n::: callout-warning\n## If you want to try...\n\nYou'll need to be set up for LaTeX, but it's not really suited to the tutorial context.\n\n-   PDF = LaTeX = TinyTeX installation\n-   LaTeX = CTAN packages =\\> Long installation\n-   Producing a PDF with LaTeX =\\> Not so fast\n:::\n\n## Your turn!\n\n::: callout\n# Produce a PDF with Typst\n\n-   Change to `format: typst` and Render. Look at your shiny new PDF !\n-   Learm more about Typst at in [Quarto's guide](https://quarto.org/docs/output-formats/typst.html) and tweak options.\n:::\n\n::: {.callout-important}\n\n## Quarto 1.5 required\n\nYou really need latest Quarto 1.5 for our example to render completely.\n\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_27aad44e\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n#### Demo time ! ðŸ•™ {.fragment}\n\n# Questions ?\n\n::: fragment\nNow let's take a look at how Quarto can be used to produce more sophisticated content.\n\n[[Next](/3-projects/)]{.button}\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}